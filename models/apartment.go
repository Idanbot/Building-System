// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Apartment is an object representing the database table.
type Apartment struct {
	ID         int    `boil:"id" json:"id" toml:"id" yaml:"id"`
	BuildingID int    `boil:"building_id" json:"building_id" toml:"building_id" yaml:"building_id"`
	Number     string `boil:"number" json:"number" toml:"number" yaml:"number"`
	Floor      int    `boil:"floor" json:"floor" toml:"floor" yaml:"floor"`
	SQMeters   int    `boil:"sq_meters" json:"sq_meters" toml:"sq_meters" yaml:"sq_meters"`

	R *apartmentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L apartmentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ApartmentColumns = struct {
	ID         string
	BuildingID string
	Number     string
	Floor      string
	SQMeters   string
}{
	ID:         "id",
	BuildingID: "building_id",
	Number:     "number",
	Floor:      "floor",
	SQMeters:   "sq_meters",
}

var ApartmentTableColumns = struct {
	ID         string
	BuildingID string
	Number     string
	Floor      string
	SQMeters   string
}{
	ID:         "apartment.id",
	BuildingID: "apartment.building_id",
	Number:     "apartment.number",
	Floor:      "apartment.floor",
	SQMeters:   "apartment.sq_meters",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ApartmentWhere = struct {
	ID         whereHelperint
	BuildingID whereHelperint
	Number     whereHelperstring
	Floor      whereHelperint
	SQMeters   whereHelperint
}{
	ID:         whereHelperint{field: "\"apartment\".\"id\""},
	BuildingID: whereHelperint{field: "\"apartment\".\"building_id\""},
	Number:     whereHelperstring{field: "\"apartment\".\"number\""},
	Floor:      whereHelperint{field: "\"apartment\".\"floor\""},
	SQMeters:   whereHelperint{field: "\"apartment\".\"sq_meters\""},
}

// ApartmentRels is where relationship names are stored.
var ApartmentRels = struct {
	Building string
}{
	Building: "Building",
}

// apartmentR is where relationships are stored.
type apartmentR struct {
	Building *Building `boil:"Building" json:"Building" toml:"Building" yaml:"Building"`
}

// NewStruct creates a new relationship struct
func (*apartmentR) NewStruct() *apartmentR {
	return &apartmentR{}
}

func (r *apartmentR) GetBuilding() *Building {
	if r == nil {
		return nil
	}
	return r.Building
}

// apartmentL is where Load methods for each relationship are stored.
type apartmentL struct{}

var (
	apartmentAllColumns            = []string{"id", "building_id", "number", "floor", "sq_meters"}
	apartmentColumnsWithoutDefault = []string{"building_id", "number", "floor", "sq_meters"}
	apartmentColumnsWithDefault    = []string{"id"}
	apartmentPrimaryKeyColumns     = []string{"id"}
	apartmentGeneratedColumns      = []string{}
)

type (
	// ApartmentSlice is an alias for a slice of pointers to Apartment.
	// This should almost always be used instead of []Apartment.
	ApartmentSlice []*Apartment

	apartmentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	apartmentType                 = reflect.TypeOf(&Apartment{})
	apartmentMapping              = queries.MakeStructMapping(apartmentType)
	apartmentPrimaryKeyMapping, _ = queries.BindMapping(apartmentType, apartmentMapping, apartmentPrimaryKeyColumns)
	apartmentInsertCacheMut       sync.RWMutex
	apartmentInsertCache          = make(map[string]insertCache)
	apartmentUpdateCacheMut       sync.RWMutex
	apartmentUpdateCache          = make(map[string]updateCache)
	apartmentUpsertCacheMut       sync.RWMutex
	apartmentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single apartment record from the query.
func (q apartmentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Apartment, error) {
	o := &Apartment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for apartment")
	}

	return o, nil
}

// All returns all Apartment records from the query.
func (q apartmentQuery) All(ctx context.Context, exec boil.ContextExecutor) (ApartmentSlice, error) {
	var o []*Apartment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Apartment slice")
	}

	return o, nil
}

// Count returns the count of all Apartment records in the query.
func (q apartmentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count apartment rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q apartmentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if apartment exists")
	}

	return count > 0, nil
}

// Building pointed to by the foreign key.
func (o *Apartment) Building(mods ...qm.QueryMod) buildingQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BuildingID),
	}

	queryMods = append(queryMods, mods...)

	return Buildings(queryMods...)
}

// LoadBuilding allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (apartmentL) LoadBuilding(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApartment interface{}, mods queries.Applicator) error {
	var slice []*Apartment
	var object *Apartment

	if singular {
		var ok bool
		object, ok = maybeApartment.(*Apartment)
		if !ok {
			object = new(Apartment)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeApartment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeApartment))
			}
		}
	} else {
		s, ok := maybeApartment.(*[]*Apartment)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeApartment)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeApartment))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &apartmentR{}
		}
		args[object.BuildingID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &apartmentR{}
			}

			args[obj.BuildingID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`building`),
		qm.WhereIn(`building.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Building")
	}

	var resultSlice []*Building
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Building")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for building")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for building")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Building = foreign
		if foreign.R == nil {
			foreign.R = &buildingR{}
		}
		foreign.R.Apartments = append(foreign.R.Apartments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BuildingID == foreign.ID {
				local.R.Building = foreign
				if foreign.R == nil {
					foreign.R = &buildingR{}
				}
				foreign.R.Apartments = append(foreign.R.Apartments, local)
				break
			}
		}
	}

	return nil
}

// SetBuilding of the apartment to the related item.
// Sets o.R.Building to related.
// Adds o to related.R.Apartments.
func (o *Apartment) SetBuilding(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Building) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"apartment\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"building_id"}),
		strmangle.WhereClause("\"", "\"", 2, apartmentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BuildingID = related.ID
	if o.R == nil {
		o.R = &apartmentR{
			Building: related,
		}
	} else {
		o.R.Building = related
	}

	if related.R == nil {
		related.R = &buildingR{
			Apartments: ApartmentSlice{o},
		}
	} else {
		related.R.Apartments = append(related.R.Apartments, o)
	}

	return nil
}

// Apartments retrieves all the records using an executor.
func Apartments(mods ...qm.QueryMod) apartmentQuery {
	mods = append(mods, qm.From("\"apartment\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"apartment\".*"})
	}

	return apartmentQuery{q}
}

// FindApartment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindApartment(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Apartment, error) {
	apartmentObj := &Apartment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"apartment\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, apartmentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from apartment")
	}

	return apartmentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Apartment) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no apartment provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(apartmentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	apartmentInsertCacheMut.RLock()
	cache, cached := apartmentInsertCache[key]
	apartmentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			apartmentAllColumns,
			apartmentColumnsWithDefault,
			apartmentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(apartmentType, apartmentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(apartmentType, apartmentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"apartment\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"apartment\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into apartment")
	}

	if !cached {
		apartmentInsertCacheMut.Lock()
		apartmentInsertCache[key] = cache
		apartmentInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Apartment.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Apartment) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	apartmentUpdateCacheMut.RLock()
	cache, cached := apartmentUpdateCache[key]
	apartmentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			apartmentAllColumns,
			apartmentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update apartment, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"apartment\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, apartmentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(apartmentType, apartmentMapping, append(wl, apartmentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update apartment row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for apartment")
	}

	if !cached {
		apartmentUpdateCacheMut.Lock()
		apartmentUpdateCache[key] = cache
		apartmentUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q apartmentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for apartment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for apartment")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ApartmentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), apartmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"apartment\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, apartmentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in apartment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all apartment")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Apartment) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no apartment provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(apartmentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	apartmentUpsertCacheMut.RLock()
	cache, cached := apartmentUpsertCache[key]
	apartmentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			apartmentAllColumns,
			apartmentColumnsWithDefault,
			apartmentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			apartmentAllColumns,
			apartmentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert apartment, could not build update column list")
		}

		ret := strmangle.SetComplement(apartmentAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(apartmentPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert apartment, could not build conflict column list")
			}

			conflict = make([]string, len(apartmentPrimaryKeyColumns))
			copy(conflict, apartmentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"apartment\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(apartmentType, apartmentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(apartmentType, apartmentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert apartment")
	}

	if !cached {
		apartmentUpsertCacheMut.Lock()
		apartmentUpsertCache[key] = cache
		apartmentUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Apartment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Apartment) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Apartment provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), apartmentPrimaryKeyMapping)
	sql := "DELETE FROM \"apartment\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from apartment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for apartment")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q apartmentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no apartmentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from apartment")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for apartment")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ApartmentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), apartmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"apartment\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, apartmentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from apartment slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for apartment")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Apartment) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindApartment(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ApartmentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ApartmentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), apartmentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"apartment\".* FROM \"apartment\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, apartmentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ApartmentSlice")
	}

	*o = slice

	return nil
}

// ApartmentExists checks if the Apartment row exists.
func ApartmentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"apartment\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if apartment exists")
	}

	return exists, nil
}

// Exists checks if the Apartment row exists.
func (o *Apartment) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ApartmentExists(ctx, exec, o.ID)
}
